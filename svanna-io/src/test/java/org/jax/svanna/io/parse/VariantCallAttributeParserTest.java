package org.jax.svanna.io.parse;

import htsjdk.variant.variantcontext.VariantContext;
import htsjdk.variant.vcf.VCFCodec;
import htsjdk.variant.vcf.VCFFileReader;
import htsjdk.variant.vcf.VCFHeaderVersion;
import org.jax.svanna.core.reference.Zygosity;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;

import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.stream.Stream;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.equalTo;

public class VariantCallAttributeParserTest {

    private static final VCFCodec VCF_CODEC = new VCFCodec();
    private static final boolean REQUIRE_INDEX = false;
    /* VCF header with all fields that are present in VCF files generated by Sniffles, SVIM, and PBSV. */
    private static final Path SV_EXAMPLE_PATH = Paths.get("src/test/resources/org/jax/svanna/io/parse/uber_header.vcf");

    private VariantCallAttributeParser parser;

    @BeforeAll
    public static void beforeAll() {
        try (VCFFileReader reader = new VCFFileReader(SV_EXAMPLE_PATH, REQUIRE_INDEX)) {
            VCF_CODEC.setVCFHeader(reader.getFileHeader(), VCFHeaderVersion.VCF4_3);
        }
    }

    @BeforeEach
    public void setUp() {
        parser = VariantCallAttributeParser.getInstance();
    }

    @ParameterizedTest
    @MethodSource("provideSnifflesVariants")
    public void parseAttributes_Sniffles(VariantContext vc, int sampleIdx,
                                         Zygosity zygosity, int dp, int refDepth, int altDepth) {
        VariantCallAttributes attributes = parser.parseAttributes(vc.getAttributes(), vc.getGenotype(sampleIdx));

        assertThat(attributes.zygosity(), equalTo(zygosity));
        assertThat(attributes.dp(), equalTo(dp));
        assertThat(attributes.refReads(), equalTo(refDepth));
        assertThat(attributes.altReads(), equalTo(altDepth));
    }

    private static Stream<Arguments> provideSnifflesVariants() {
        return Stream.of(
                Arguments.of(decodeLine("CM000663.2\t1366938\t1\tN\t<DEL>\t.\tPASS\tIMPRECISE;SVMETHOD=Snifflesv1.0.12;CHR2=CM000663.2;END=1367108;ZMW=9;STD_quant_start=11.333333;STD_quant_stop=10.000000;Kurtosis_quant_start=6.000000;Kurtosis_quant_stop=6.000000;SVTYPE=DEL;SUPTYPE=AL;SVLEN=-170;STRANDS=+-;STRANDS2=4,5,4,5;RE=9;REF_strand=0,0;Strandbias_pval=1;AF=1\tGT:DR:DV\t1/1:0:9"), 0, Zygosity.HOMOZYGOUS, 9, 0, 9),
                Arguments.of(decodeLine("CM000663.2\t45825473\t2\tN\t<DUP>\t.\tPASS\tPRECISE;SVMETHOD=Snifflesv1.0.12;CHR2=CM000663.2;END=154318883;ZMW=1;STD_quant_start=0.000000;STD_quant_stop=0.000000;Kurtosis_quant_start=-nan;Kurtosis_quant_stop=-nan;SVTYPE=DUP;SUPTYPE=SR;SVLEN=108493410;STRANDS=-+;STRANDS2=1,0,1,0;RE=1;REF_strand=0,0;Strandbias_pval=1;AF=1\tGT:DR:DV\t./.:0:1"), 0, Zygosity.UNKNOWN, 1, 0, 1),
                Arguments.of(decodeLine("CM000663.2\t47681767\t3\tN\t<INV>\t.\tPASS\tPRECISE;SVMETHOD=Snifflesv1.0.12;CHR2=CM000663.2;END=200616263;ZMW=1;STD_quant_start=0.000000;STD_quant_stop=0.000000;Kurtosis_quant_start=-nan;Kurtosis_quant_stop=-nan;SVTYPE=INV;SUPTYPE=SR;SVLEN=152934496;STRANDS=++;STRANDS2=1,0,0,1;RE=1;REF_strand=0,0;Strandbias_pval=1;AF=1\tGT:DR:DV\t./.:0:1"), 0, Zygosity.UNKNOWN, 1, 0, 1),
                Arguments.of(decodeLine("CM000671.2\t134183094\t5\tN\t<INS>\t.\tPASS\tIMPRECISE;SVMETHOD=Snifflesv1.0.12;CHR2=CM000671.2;END=134183094;ZMW=10;STD_quant_start=0.316228;STD_quant_stop=3986.130668;Kurtosis_quant_start=7.000000;Kurtosis_quant_stop=-1.392315;SVTYPE=INS;SUPTYPE=AL,SR;SVLEN=7365;STRANDS=+-;STRANDS2=5,5,5,5;RE=10;REF_strand=0,0;Strandbias_pval=1;AF=1\tGT:DR:DV\t1/1:0:10"), 0, Zygosity.HOMOZYGOUS, 10, 0, 10),
                Arguments.of(decodeLine("CM000684.2\t11454286\t4\tN\t<INVDUP>\t.\tPASS\tPRECISE;SVMETHOD=Snifflesv1.0.12;CHR2=CM000684.2;END=11455841;ZMW=2;STD_quant_start=0.000000;STD_quant_stop=0.000000;Kurtosis_quant_start=-nan;Kurtosis_quant_stop=-nan;SVTYPE=INVDUP;SUPTYPE=SR;SVLEN=1555;STRANDS=--;STRANDS2=0,3,3,0;RE=2;REF_strand=12,15;Strandbias_pval=0.255172;AF=0.0689655\tGT:DR:DV\t0/0:27:2"), 0, Zygosity.HOMOZYGOUS, 2, 27, 2));
    }

    @ParameterizedTest
    @MethodSource("providePbsvVariants")
    public void parseAttributes_Pbsv(VariantContext vc, int sampleIdx,
                                     Zygosity zygosity, int dp, int refDepth, int altDepth, int copyNumber) {
        VariantCallAttributes attributes = parser.parseAttributes(vc.getAttributes(), vc.getGenotype(sampleIdx));

        assertThat(attributes.zygosity(), equalTo(zygosity));
        assertThat(attributes.dp(), equalTo(dp));
        assertThat(attributes.refReads(), equalTo(refDepth));
        assertThat(attributes.altReads(), equalTo(altDepth));
        assertThat(attributes.copyNumber(), equalTo(copyNumber));
    }

    private static Stream<Arguments> providePbsvVariants() {
        return Stream.of(
                Arguments.of(decodeLine("CM000663.2\t367610\tpbsv.DEL.1\tTATTCATGCACACATGTTCAC\tT\t.\tPASS\tSVTYPE=DEL;END=367630;SVLEN=-20\tGT:AD:DP\t1/1:0,2:2"), 0, Zygosity.HOMOZYGOUS, 2, 0, 2, -1),
                Arguments.of(decodeLine("CM000663.2\t2514580\tpbsv.INS.2\tG\tGGGGCAGGGTGGGGGCTGGCCGTTGGGGGCTGCCCA\t.\tPASS\tSVTYPE=INS;END=2514580;SVLEN=35\tGT:AD:DP\t0/1:3,7:10"), 0, Zygosity.HETEROZYGOUS, 10, 3, 7, -1),
                Arguments.of(decodeLine("CM000663.2\t13054707\tpbsv.BND.CM000663.2:13054707-CM000663.2:13256071\tC\tC]CM000663.2:13256071]\t.\tPASS\tSVTYPE=BND;CIPOS=0,0;MATEID=pbsv.BND.CM000663.2:13256071-CM000663.2:13054707;MATEDIST=201364\tGT:AD:DP\t0/1:1,1:2"), 0, Zygosity.HETEROZYGOUS, 2, 1, 1, -1),
                Arguments.of(decodeLine("CM000663.2\t60776838\tpbsv.INV.3\tT\t<INV>\t.\tPASS\tSVTYPE=INV;END=60778680\tGT:AD:DP\t0/1:5,1:6"), 0, Zygosity.HETEROZYGOUS, 6, 5, 1, -1),
                Arguments.of(decodeLine("CM000663.2\t61025427\tpbsv.INS.DUP.4\tA\t<DUP>\t.\tPASS\tSVTYPE=DUP;END=61025468;SVLEN=41\tGT:AD:DP\t0/1:2,4:6"), 0, Zygosity.HETEROZYGOUS, 6, 2, 4, -1),
                Arguments.of(decodeLine("CM000663.2\t144101291\tpbsv.CNV.5\tG\t<CNV>\t.\tPASS\tSVTYPE=cnv;END=144106919;SVLEN=5628;SHADOWED\tCN\t4"), 0, Zygosity.UNKNOWN, -1, -1, -1, 4));
    }

    @ParameterizedTest
    @MethodSource("provideSvimVariants")
    public void parseAttributes_Svim(VariantContext vc, int sampleIdx,
                                     Zygosity zygosity, int dp, int refDepth, int altDepth, int copyNumber) {
        VariantCallAttributes attributes = parser.parseAttributes(vc.getAttributes(), vc.getGenotype(sampleIdx));

        assertThat(attributes.zygosity(), equalTo(zygosity));
        assertThat(attributes.dp(), equalTo(dp));
        assertThat(attributes.refReads(), equalTo(refDepth));
        assertThat(attributes.altReads(), equalTo(altDepth));
        assertThat(attributes.copyNumber(), equalTo(copyNumber));
    }

    private static Stream<Arguments> provideSvimVariants() {
        return Stream.of(
                Arguments.of(decodeLine("CM000663.2\t180188\tsvim.DEL.1\tN\t<DEL>\t4\thom_ref\tSVTYPE=DEL;END=180393;SVLEN=-205;SUPPORT=4;STD_SPAN=9.76;STD_POS=8.86\tGT:DP:AD\t0/0:48:44,4"), 0, Zygosity.HOMOZYGOUS, 48, 44, 4, -1),
                Arguments.of(decodeLine("CM000663.2\t1152627\tsvim.INS.2\tN\t<INS>\t12\tPASS\tSVTYPE=INS;END=1152627;SVLEN=86;SUPPORT=10;STD_SPAN=0.57;STD_POS=5.22;SEQS=GACTCAGCTCTATCATCCCATCAGGGATCCAGGCTTTCCACACGACCCAGCTCTATCATCCTCTCAGGGACCCAGGCTCTCCACAC,GACTCAGCTCTATCATCCCATCAGGGATCCAGGCTTTCCACACGACCCAGCTCTATCATCCTCTCAGGGACCCAGGCTCTCCACAC,GACTCAGCTCTATCATCCCATCAGGGATCCAGGCTTTCCACACGACCCAGCTCTATCATCCTCTCAGGGACCCAGGCTCTCCACAC,GACTCAGCTCTATCATCCCATCAGGGATCCAGGCTTTCCACACGACCCAGCTCTATCATCCTCTCAGGGACCCAGGCTCTCCACAC,GACTCAGCTCTATCATCCCATCAGGGATCCAGGCTTTCCACACGACCCAGCTCTATCATCCTCTCAGGGACCCAGGCTCTCCACAC,GACTCAGCTCTATCATCCCATCAGGGATCCAGGCTTTCCACACGACCCAGCTCTATCATCCTCTCAGGGACCCAGGCTCTCCACAC,GACTCAGCTCTATCATCCCCATCAGGGATCCAGGCTTTCCACACGACCCAGCTCTATCATCCTCTCAGGGACCCAGGCTCTCCACAC,GACTCAGCTCTATCATCCATCAGGGATCCAGGCTTTCCACACGACCCAGCTCTATCATCCTCTCAGGGACCCAGGCTCTCCACAC,GACTCAGCTCTATCATCCCATCAGGGATCCAGGCTTTCCACACGACCCAGCTCTATCATCCTCTCAGGGACCCAGGCTCTCCACAC,CCATCAGGGATCCAGGCTTTCCACACGACCCAGCTCTATCATCCTCTCAGGGACCCAGGCTCTCCACACGACCCAGCTCTATCAT\tGT:DP:AD\t0/1:19:9,10"), 0, Zygosity.HETEROZYGOUS, 19, 9, 10, -1),
                Arguments.of(decodeLine("CM000663.2\t1177318\tsvim.BND.3\tN\tN[CM000666.2:182304220[\t1\tPASS\tSVTYPE=BND;SUPPORT=1;STD_POS1=.;STD_POS2=.\tGT:DP:AD\t./.:.:.,."), 0, Zygosity.UNKNOWN, -1, -1, 1, -1),
                Arguments.of(decodeLine("CM000663.2\t1382231\tsvim.DUP_TANDEM.4\tN\t<DUP:TANDEM>\t2\tPASS\tSVTYPE=DUP:TANDEM;END=1382898;SVLEN=668;SUPPORT=2;STD_SPAN=13.44;STD_POS=6.72\tGT:CN:DP:AD\t./.:2:.:.,."), 0, Zygosity.UNKNOWN, -1, -1, 2, 2),
                Arguments.of(decodeLine("CM000663.2\t26641623\tsvim.INV.5\tN\t<INV>\t3\tPASS\tSVTYPE=INV;END=26646431;SUPPORT=8;STD_SPAN=.;STD_POS=.\tGT:DP:AD\t0/1:14:6,8"), 0, Zygosity.HETEROZYGOUS, 14, 6, 8, -1),
                Arguments.of(decodeLine("CM000663.2\t168055351\tsvim.DUP_INT.6\tN\t<DUP:INT>\t17\tPASS\tSVTYPE=DUP:INT;CUTPASTE;END=168056494;SVLEN=1144;SUPPORT=16;STD_SPAN=3.08;STD_POS=1.54\tGT:DP:AD\t1/1:16:0,16"), 0, Zygosity.HOMOZYGOUS, 16, 0, 16, -1));
    }

    private static VariantContext decodeLine(String line) {
        return VCF_CODEC.decode(line);
    }

}