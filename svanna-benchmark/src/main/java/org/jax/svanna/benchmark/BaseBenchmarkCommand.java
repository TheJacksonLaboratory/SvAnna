package org.jax.svanna.benchmark;

import org.jax.svanna.core.LogUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.boot.builder.SpringApplicationBuilder;
import org.springframework.context.ConfigurableApplicationContext;
import org.springframework.context.annotation.Configuration;
import picocli.CommandLine;

import java.nio.file.Path;
import java.text.NumberFormat;
import java.util.Map;
import java.util.concurrent.Callable;

@Configuration
@EnableAutoConfiguration
abstract class BaseBenchmarkCommand implements Callable<Integer> {

    private static final Logger LOGGER = LoggerFactory.getLogger(BaseBenchmarkCommand.class);

    protected static final NumberFormat NF = NumberFormat.getNumberInstance();

    static {
        NF.setMaximumFractionDigits(2);
    }

    @CommandLine.Option(names = {"-c", "--config"},
            required = true,
            paramLabel = "svanna-config.yml",
            description = "path to configuration file generated by the `generate-config` command of the CLI module")
    public Path configFile;


    protected ConfigurableApplicationContext getContext() {
        // bootstrap Spring application context
        if (!configFile.toFile().isFile()) {
            LogUtils.logError(LOGGER, "The config file `{}` does not exist", configFile.toAbsolutePath());
            System.exit(1);
        }
        LogUtils.logDebug(LOGGER, "Using SvAnna configuration file at `{}`", configFile.toAbsolutePath());

        return new SpringApplicationBuilder(BaseBenchmarkCommand.class)
                .properties(Map.of("spring.config.location", configFile.toString()))
                .run();
    }

}
